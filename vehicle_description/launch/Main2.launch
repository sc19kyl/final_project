<?xml version="1.0" encoding="UTF-8" ?>
<launch>
	<arg name="x" default="-2.0"/>
  <arg name="y" default="-0.5"/>
  <arg name="z" default="0.0"/>
  <arg name="roll" default="0"/>
  <arg name="pitch" default="0"/>
  <arg name="yaw" default="0"/>
  
<!-- launch Gazebo world - Cafe_actors.world-->
 <arg name="world_file" default="$(find turtlebot3_gazebo)/worlds/turtlebot3_world.world"/>
        
	<!-- Launch Gazebo World -->
	<include file="$(find gazebo_ros)/launch/empty_world.launch">
		<arg name="use_sim_time" value="true"/>
		<arg name="verbose" value="false"/>
		<arg name="debug" value="false"/>
		<arg name="gui" value="true" />
		<arg name="world_name" value="$(arg world_file)"/>
	</include>

<!-- launch Gazebo world - ISCAS_museum_actors.world -->
<!--
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="verbose" value="true"/>
    <arg name="world_name" value="$(find hydra_one_description)/worlds/ISCAS_museum_actors.world"/> 
  </include>-->

 <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description" textfile ="$(find vehicle_description)/urdf/prototype2.urdf" />
<!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
		args="-urdf -model prototype_one -param robot_description
			  -x $(arg x) -y $(arg y) -z $(arg z)
			  -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)"/>
    
 <!-- convert joint states to TF transforms for rviz, etc -->
    <!-- <remap from="/joint_states" to="/hydra_one/joint_states" />  -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
    respawn="false" output="screen">
    <!-- <remap from="/joint_states" to="/hydra_one/joint_states" />  -->
  </node>

<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>




</launch>
